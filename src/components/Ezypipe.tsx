import React, { useState, useEffect, useMemo, useRef, createContext, useContext } from 'react';

const pipeSizeData = {
    "PPR: PN10": [
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.61, "id_m": 15.49},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 25, "text_si": "25mm", "id_in": 0.8, "id_m": 20.32},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 1.03, "id_m": 26.16},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.28, "id_m": 32.51},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.61, "id_m": 40.89},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.02, "id_m": 51.31},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.42, "id_m": 61.47},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 2.91, "id_m": 73.91},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.54, "id_m": 89.92},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.02, "id_m": 102.11},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.15, "id_m": 130.81},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 200, "text_si": "200mm", "id_in": 6.44, "id_m": 163.58},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 8.06, "id_m": 204.72},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 10.15, "id_m": 257.81}
  ],
  "PPR: PN20": [
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.52, "id_m": 13.21},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 25, "text_si": "25mm", "id_in": 0.65, "id_m": 16.51},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 0.83, "id_m": 21.08},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.05, "id_m": 26.67},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.31, "id_m": 33.27},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 1.65, "id_m": 41.91},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 1.97, "id_m": 50.04},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 2.36, "id_m": 59.94},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 2.89, "id_m": 73.41},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 4.57, "id_m": 116.08}
  ],
  "PVC:8.5": [
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 18, "text_si": "18mm", "id_in": 0.71, "id_m": 18.03},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.87, "id_m": 22.1},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 25, "text_si": "25mm", "id_in": 1.18, "id_m": 29.97},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 35, "text_si": "35mm", "id_in": 1.5, "id_m": 38.1},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.71, "id_m": 43.43},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 55, "text_si": "55mm", "id_in": 2.13, "id_m": 54.1},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 65, "text_si": "65mm", "id_in": 2.72, "id_m": 69.09},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 80, "text_si": "80mm", "id_in": 3.18, "id_m": 80.77},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 100, "text_si": "100mm", "id_in": 4.08, "id_m": 103.63},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 5.01, "id_m": 127.25},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 150, "text_si": "150mm", "id_in": 5.91, "id_m": 150.11},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.81, "id_m": 198.37},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 9.65, "id_m": 245.11},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 300, "text_si": "300mm", "id_in": 11.5, "id_m": 292.1},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 350, "text_si": "350mm", "id_in": 13.39, "id_m": 340.11},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 15.2, "id_m": 386.08},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 17.01, "id_m": 432.05},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 18.82, "id_m": 478.03},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 600, "text_si": "600mm", "id_in": 22.8, "id_m": 579.12}
  ],
  "PVC:13.5": [
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 18, "text_si": "18mm", "id_in": 0.67, "id_m": 17.02},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.83, "id_m": 21.08},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 25, "text_si": "25mm", "id_in": 1.1, "id_m": 27.94},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 35, "text_si": "35mm", "id_in": 1.41, "id_m": 35.81},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.61, "id_m": 40.89},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 55, "text_si": "55mm", "id_in": 2.02, "id_m": 51.31},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 65, "text_si": "65mm", "id_in": 2.57, "id_m": 65.28},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 80, "text_si": "80mm", "id_in": 3, "id_m": 76.2},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 100, "text_si": "100mm", "id_in": 3.85, "id_m": 97.79},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.73, "id_m": 120.14},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 150, "text_si": "150mm", "id_in": 5.57, "id_m": 141.48},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.43, "id_m": 188.72},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 9.18, "id_m": 233.17},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 300, "text_si": "300mm", "id_in": 10.94, "id_m": 277.88},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 350, "text_si": "350mm", "id_in": 12.72, "id_m": 323.09},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 14.45, "id_m": 367.03},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.17, "id_m": 410.72},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 17.89, "id_m": 454.41},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 600, "text_si": "600mm", "id_in": 21.68, "id_m": 550.67}
  ],
  "HDPE: PN4 SDR 41": [
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 11.8, "id_m": 299.72},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 13.29, "id_m": 337.57},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 14.98, "id_m": 380.49},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.85, "id_m": 427.99},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 18.72, "id_m": 475.49},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 20.97, "id_m": 532.64},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 23.59, "id_m": 599.19}
  ],
  "HDPE: PN6.3 SDR 26": [
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.81, "id_m": 45.97},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.28, "id_m": 57.91},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.72, "id_m": 69.09},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 3.27, "id_m": 83.06},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 4, "id_m": 101.6},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.54, "id_m": 115.32},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 5.09, "id_m": 129.29},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.81, "id_m": 147.57},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 6.54, "id_m": 166.12},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.27, "id_m": 184.66},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 8.18, "id_m": 207.77},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 9.09, "id_m": 230.89},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 10.18, "id_m": 258.57},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 11.45, "id_m": 290.83},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 12.91, "id_m": 327.91},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 14.54, "id_m": 369.32},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.36, "id_m": 415.54},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 18.18, "id_m": 461.77},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 20.36, "id_m": 517.14},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 22.91, "id_m": 581.91}
  ],
  "HDPE: PN 8 SDR 21": [
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.42, "id_m": 36.07},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.78, "id_m": 45.21},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.24, "id_m": 56.9},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.67, "id_m": 67.82},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 3.2, "id_m": 81.28},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.91, "id_m": 99.31},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.45, "id_m": 113.03},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4.98, "id_m": 126.49},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.69, "id_m": 144.53},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 6.41, "id_m": 162.81},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.12, "id_m": 180.85},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 8.01, "id_m": 203.45},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 8.91, "id_m": 226.31},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 9.97, "id_m": 253.24},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 11.22, "id_m": 284.99},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 12.65, "id_m": 321.31},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 14.24, "id_m": 361.7},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.02, "id_m": 406.91},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 17.8, "id_m": 452.12},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 19.94, "id_m": 506.48},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 22.44, "id_m": 569.98}
  ],
  "HDPE: PN 10 SDR 17": [
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 1.1, "id_m": 27.94},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.39, "id_m": 35.31},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.73, "id_m": 43.94},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.18, "id_m": 55.37},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.6, "id_m": 66.04},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 3.12, "id_m": 79.25},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.81, "id_m": 96.77},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.34, "id_m": 110.24},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4.86, "id_m": 123.44},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.55, "id_m": 140.97},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 6.24, "id_m": 158.5},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 6.94, "id_m": 176.28},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 7.8, "id_m": 198.12},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 8.68, "id_m": 220.47},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 9.72, "id_m": 246.89},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 10.93, "id_m": 277.62},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 12.31, "id_m": 312.67},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 13.88, "id_m": 352.55},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 15.61, "id_m": 396.49},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 17.35, "id_m": 440.69},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 19.43, "id_m": 493.52},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 21.86, "id_m": 555.24}
  ],
  "HDPE: PN 12.5 SDR 13.6 ": [
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.83, "id_m": 21.08},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 1.07, "id_m": 27.18},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.34, "id_m": 34.04},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.68, "id_m": 42.67},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.11, "id_m": 53.59},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.51, "id_m": 63.75},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 3.02, "id_m": 76.71},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.69, "id_m": 93.73},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.2, "id_m": 106.68},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4.7, "id_m": 119.38},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.37, "id_m": 136.4},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 6.04, "id_m": 153.42},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 6.72, "id_m": 170.69},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 7.55, "id_m": 191.77},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 8.39, "id_m": 213.11},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 9.4, "id_m": 238.76},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 10.57, "id_m": 268.48},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 11.92, "id_m": 302.77},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 13.02, "id_m": 330.71},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 14.26, "id_m": 362.2},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 15.43, "id_m": 391.92},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 16.7, "id_m": 424.18},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 18.05, "id_m": 458.47}
  ],
  "HDPE: PN 16 SDR 11": [
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 16, "text_si": "16mm", "id_in": 0.63, "id_m": 16},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.8, "id_m": 20.32},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 1.02, "id_m": 25.91},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.28, "id_m": 32.51},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.61, "id_m": 40.89},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 2.02, "id_m": 51.31},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.42, "id_m": 61.47},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 2.9, "id_m": 73.66},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.54, "id_m": 89.92},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.02, "id_m": 102.11},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4.51, "id_m": 114.55},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 5.15, "id_m": 130.81},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 5.8, "id_m": 147.32},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 6.44, "id_m": 163.58},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 7.24, "id_m": 183.9},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 8.06, "id_m": 204.72},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 9.02, "id_m": 229.11},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 10.94, "id_m": 277.88},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 11.44, "id_m": 290.58},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 12.89, "id_m": 327.41},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 14.5, "id_m": 368.3},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 16.11, "id_m": 409.19},
    {"nom_ip": "22", "text_ip": "22\"", "nom_si": 560, "text_si": "560mm", "id_in": 18.05, "id_m": 458.47},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 630, "text_si": "630mm", "id_in": 20.3, "id_m": 515.62}
  ],
  "HDPE: PN 20 SDR 9": [
    {"nom_ip": "0.375", "text_ip": "3/8\"", "nom_si": 10, "text_si": "10mm", "id_in": 0.47, "id_m": 11.94},
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 16, "text_si": "16mm", "id_in": 0.61, "id_m": 15.49},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.75, "id_m": 19.05},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 0.98, "id_m": 24.89},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.22, "id_m": 30.99},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.53, "id_m": 38.86},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 1.92, "id_m": 48.77},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.29, "id_m": 58.17},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 2.75, "id_m": 69.85},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.36, "id_m": 85.34},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 3.82, "id_m": 97.03},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4.28, "id_m": 108.71},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 4.89, "id_m": 124.21},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 5.5, "id_m": 139.7},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 6.11, "id_m": 155.19},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 6.87, "id_m": 174.5},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 7.65, "id_m": 194.31},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 8.56, "id_m": 217.42},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 9.63, "id_m": 244.6},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 10.85, "id_m": 275.59},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 12.23, "id_m": 310.64},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 13.76, "id_m": 349.5},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 15.29, "id_m": 388.37}
  ],
  "HDPE: PN 25 SDR 7.4": [
    {"nom_ip": "0.375", "text_ip": "3/8\"", "nom_si": 10, "text_si": "10mm", "id_in": 0.45, "id_m": 11.43},
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 16, "text_si": "16mm", "id_in": 0.55, "id_m": 13.97},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.71, "id_m": 18.03},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 32, "text_si": "32mm", "id_in": 0.91, "id_m": 23.11},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.14, "id_m": 28.96},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 50, "text_si": "50mm", "id_in": 1.43, "id_m": 36.32},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 63, "text_si": "63mm", "id_in": 1.8, "id_m": 45.72},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 75, "text_si": "75mm", "id_in": 2.14, "id_m": 54.36},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 90, "text_si": "90mm", "id_in": 2.57, "id_m": 65.28},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 110, "text_si": "110mm", "id_in": 3.14, "id_m": 79.76},
    {"nom_ip": "4.5", "text_ip": "4 1/2\"", "nom_si": 125, "text_si": "125mm", "id_in": 3.57, "id_m": 90.68},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 140, "text_si": "140mm", "id_in": 4, "id_m": 101.6},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 160, "text_si": "160mm", "id_in": 4.57, "id_m": 116.08},
    {"nom_ip": "6.5", "text_ip": "6 1/2\"", "nom_si": 180, "text_si": "180mm", "id_in": 5.15, "id_m": 130.81},
    {"nom_ip": "7", "text_ip": "7\"", "nom_si": 200, "text_si": "200mm", "id_in": 5.72, "id_m": 145.29},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 225, "text_si": "225mm", "id_in": 6.43, "id_m": 163.32},
    {"nom_ip": "9", "text_ip": "9\"", "nom_si": 250, "text_si": "250mm", "id_in": 7.15, "id_m": 181.61},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 280, "text_si": "280mm", "id_in": 8.01, "id_m": 203.45},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 315, "text_si": "315mm", "id_in": 9.01, "id_m": 228.85},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 355, "text_si": "355mm", "id_in": 10.16, "id_m": 258.06},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 11.44, "id_m": 290.58},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 12.87, "id_m": 326.9}
  ],
  "Steel: 40(S)": [
    {"nom_ip": "0.375", "text_ip": "3/8\"", "nom_si": 10, "text_si": "10mm", "id_in": 0.49, "id_m": 12.45},
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 15, "text_si": "15mm", "id_in": 0.62, "id_m": 15.75},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.82, "id_m": 20.83},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 25, "text_si": "25mm", "id_in": 1.05, "id_m": 26.67},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 35, "text_si": "35mm", "id_in": 1.38, "id_m": 35.05},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.61, "id_m": 40.89},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 55, "text_si": "55mm", "id_in": 2.07, "id_m": 52.58},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 65, "text_si": "65mm", "id_in": 2.41, "id_m": 61.21},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 80, "text_si": "80mm", "id_in": 3.07, "id_m": 77.98},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 100, "text_si": "100mm", "id_in": 4.03, "id_m": 102.36},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 5.05, "id_m": 128.27},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 150, "text_si": "150mm", "id_in": 6.07, "id_m": 154.18},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.98, "id_m": 202.69},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 10.02, "id_m": 254.51},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 300, "text_si": "300mm", "id_in": 11.94, "id_m": 303.28},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 350, "text_si": "350mm", "id_in": 13.13, "id_m": 333.5},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 15, "id_m": 381},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.87, "id_m": 428.5},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 18.81, "id_m": 477.77},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 600, "text_si": "600mm", "id_in": 22.63, "id_m": 574.8}
  ],
  "Steel: 60(X)": [
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 9.75, "id_m": 247.65},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 300, "text_si": "300mm", "id_in": 11.75, "id_m": 298.45},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 350, "text_si": "350mm", "id_in": 13, "id_m": 330.2}
  ],
  "Steel: 80(X)": [
    {"nom_ip": "0.375", "text_ip": "3/8\"", "nom_si": 10, "text_si": "10mm", "id_in": 0.42, "id_m": 10.67},
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 15, "text_si": "15mm", "id_in": 0.55, "id_m": 13.97},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.74, "id_m": 18.8},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 25, "text_si": "25mm", "id_in": 0.96, "id_m": 24.38},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 35, "text_si": "35mm", "id_in": 1.28, "id_m": 32.51},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.5, "id_m": 38.1},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 55, "text_si": "55mm", "id_in": 1.94, "id_m": 49.28},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 65, "text_si": "65mm", "id_in": 2.32, "id_m": 58.93},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 80, "text_si": "80mm", "id_in": 2.9, "id_m": 73.66},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 100, "text_si": "100mm", "id_in": 3.83, "id_m": 97.28},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 4.81, "id_m": 122.17},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 150, "text_si": "150mm", "id_in": 5.76, "id_m": 146.3},
    {"nom_ip": "8", "text_ip": "8\"", "nom_si": 200, "text_si": "200mm", "id_in": 7.63, "id_m": 193.8},
    {"nom_ip": "10", "text_ip": "10\"", "nom_si": 250, "text_si": "250mm", "id_in": 9.56, "id_m": 242.82},
    {"nom_ip": "12", "text_ip": "12\"", "nom_si": 300, "text_si": "300mm", "id_in": 11.38, "id_m": 289.05},
    {"nom_ip": "14", "text_ip": "14\"", "nom_si": 350, "text_si": "350mm", "id_in": 12.5, "id_m": 317.5},
    {"nom_ip": "16", "text_ip": "16\"", "nom_si": 400, "text_si": "400mm", "id_in": 14.31, "id_m": 363.47},
    {"nom_ip": "18", "text_ip": "18\"", "nom_si": 450, "text_si": "450mm", "id_in": 16.13, "id_m": 409.7},
    {"nom_ip": "20", "text_ip": "20\"", "nom_si": 500, "text_si": "500mm", "id_in": 17.08, "id_m": 433.83},
    {"nom_ip": "24", "text_ip": "24\"", "nom_si": 600, "text_si": "600mm", "id_in": 21.56, "id_m": 547.62}
  ],
  "GSP: BS-M": [
    {"nom_ip": "0.375", "text_ip": "3/8\"", "nom_si": 10, "text_si": "10mm", "id_in": 0.48, "id_m": 12.19},
    {"nom_ip": "0.5", "text_ip": "1/2\"", "nom_si": 15, "text_si": "15mm", "id_in": 0.63, "id_m": 16},
    {"nom_ip": "0.75", "text_ip": "3/4\"", "nom_si": 20, "text_si": "20mm", "id_in": 0.84, "id_m": 21.34},
    {"nom_ip": "1", "text_ip": "1\"", "nom_si": 25, "text_si": "25mm", "id_in": 1.08, "id_m": 27.43},
    {"nom_ip": "1.25", "text_ip": "1 1/4\"", "nom_si": 35, "text_si": "35mm", "id_in": 1.42, "id_m": 36.07},
    {"nom_ip": "1.5", "text_ip": "1 1/2\"", "nom_si": 40, "text_si": "40mm", "id_in": 1.63, "id_m": 41.4},
    {"nom_ip": "2", "text_ip": "2\"", "nom_si": 55, "text_si": "55mm", "id_in": 2.07, "id_m": 52.58},
    {"nom_ip": "2.5", "text_ip": "2 1/2\"", "nom_si": 65, "text_si": "65mm", "id_in": 2.69, "id_m": 68.33},
    {"nom_ip": "3", "text_ip": "3\"", "nom_si": 80, "text_si": "80mm", "id_in": 3.15, "id_m": 80.01},
    {"nom_ip": "4", "text_ip": "4\"", "nom_si": 100, "text_si": "100mm", "id_in": 4.11, "id_m": 104.39},
    {"nom_ip": "5", "text_ip": "5\"", "nom_si": 125, "text_si": "125mm", "id_in": 5.07, "id_m": 128.78},
    {"nom_ip": "6", "text_ip": "6\"", "nom_si": 150, "text_si": "150mm", "id_in": 6.06, "id_m": 153.92}
  ],
};

type PipeTypeKey = keyof typeof pipeSizeData;

const kValueData = {
    'Straight pipe (ท่อตรง)': {img:'ezypipe/41r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':'ไม่มี', '2.5':'ไม่มี', '3':'ไม่มี', '4':'ไม่มี', '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    '45 Degree elbow: Regular screwed type (ข้องอ 45 องศา)': {img:'/ezypipe/45 dg 1.png', '0.375':0.4, '0.5':0.37862, '0.75':0.355833, '1':0.33935, '1.25':0.329006, '1.5':0.323251, '2':0.307764, '2.5':0.304294, '3':0.294617, '4':0.287616, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    '45 Degree elbow: Long redius flanged type (ข้องอ 45 องศา)': {img:'/ezypipe/45 dg 2.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.202561, '1.25':0.194758, '1.5':0.189338, '2':0.184988, '2.5':0.180427, '3':0.177651, '4':0.168674, '5':0.162696, '6':0.159177, '8':0.152823, '10':0.148111, '12':0.145831, '14':0.14335, '16':0.141129, '18':0.139159, '20':0.13656, '24':0.134672},
    '90 Degree elbow: Regular screwed type (ข้องอ 90 องศา)': {img:'/ezypipe/Regular screwed  90.png', '0.375':2.8, '0.5':2.1058, '0.75':1.6884, '1':1.43588, '1.25':1.25301, '1.5':1.14704, '2':0.984508, '2.5':0.860706, '3':0.782133, '4':0.660276, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    '90 Degree elbow: Long redius screwed type (ข้องอ 90 องศา)': {img:'/ezypipe/90 2.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':0.92926, '1':0.738306, '1.25':0.59886, '1.5':0.515327, '2':0.40124, '2.5':0.332712, '3':0.288419, '4':0.22292, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    '90 Degree elbow: Reg flanged type (ข้องอ 90 องศา)': {img:'/ezypipe/90 3.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.43, '1.25':0.416153, '1.5':0.391249, '2':0.375493, '2.5':0.356287, '3':0.34069, '4':0.313227, '5':0.301995, '6':0.288197, '8':0.266022, '10':0.255465, '12':0.244282, '14':0.234477, '16':0.227298, '18':0.222529, '20':0.215243, '24':0.209039},
    '90 Degree elbow: Long radius flanged type (ข้องอ 90 องศา)': {img:'/ezypipe/90 4.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.5, '1.25':0.380408, '1.5':0.350552, '2':0.298946, '2.5':0.269287, '3':0.244458, '4':0.213613, '5':0.192781, '6':0.174027, '8':0.148967, '10':0.133935, '12':0.12273, '14':0.113329, '16':0.106443, '18':0.100361, '20':0.095883, '24':'ไม่มี'},
    'Return bend: Close type (ท่อโค้งกลับ)': {img:'/ezypipe/1r.png', '0.375':2.2, '0.5':2.2, '0.75':2.2, '1':2.2, '1.25':2.2, '1.5':2.2, '2':2.2, '2.5':2.2, '3':2.2, '4':2.2, '5':2.2, '6':2.2, '8':2.2, '10':2.2, '12':2.2, '14':2.2, '16':2.2, '18':2.2, '20':2.2, '24':2.2},
    'Return bend: Screwed type (ท่อโค้งกลับ)': {img:'/ezypipe/2r.png', '0.375':2.3, '0.5':2.07584, '0.75':1.66341, '1':1.45846, '1.25':1.24582, '1.5':1.13671, '2':0.964342, '2.5':0.852821, '3':0.758081, '4':0.653242, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Return bend: Flanged regular type (ท่อโค้งกลับ)': {img:'/ezypipe/3r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.422042, '1.25':0.398985, '1.5':0.371025, '2':0.357248, '2.5':0.348858, '3':0.328546, '4':0.301807, '5':0.286346, '6':0.273668, '8':0.255905, '10':0.245401, '12':0.230356, '14':0.223383, '16':0.215064, '18':0.210037, '20':0.205502, '24':'ไม่มี'},
    'Return bend: Franged long radius type (ท่อโค้งกลับ)': {img:'/ezypipe/4r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.422042, '1.25':0.385734, '1.5':0.347654, '2':0.309888, '2.5':0.279707, '3':0.256158, '4':0.22309, '5':0.204268, '6':0.185745, '8':0.163502, '10':0.148647, '12':0.135168, '14':0.126923, '16':0.118981, '18':0.112941, '20':0.107213, '24':'ไม่มี'},
    'Tee: Standard tee entrance to minor line type (ข้อต่อสามทาง)': {img:'/ezypipe/5r.png', '0.375':1.8, '0.5':1.8, '0.75':1.8, '1':1.8, '1.25':1.8, '1.5':1.8, '2':1.8, '2.5':1.8, '3':1.8, '4':1.8, '5':1.8, '6':1.8, '8':1.8, '10':1.8, '12':1.8, '14':1.8, '16':1.8, '18':1.8, '20':1.8, '24':1.8},
    'Tee Line Flow: Screwed tee line flow type (สามทางไหลตรง)': {img:'/ezypipe/6r.png', '0.375':0.9, '0.5':0.9, '0.75':0.9, '1':0.9, '1.25':0.9, '1.5':0.9, '2':0.9, '2.5':0.9, '3':0.9, '4':0.9, '5':0.9, '6':0.9, '8':0.9, '10':0.9, '12':0.9, '14':0.9, '16':0.9, '18':0.9, '20':0.9, '24':'ไม่มี'},
    'Tee Branch Flow: Screwed tee branch flow type (สามทางไหลแยก)': {img:'/ezypipe/6r.png', '0.375':2.5, '0.5':2.37253, '0.75':2.03416, '1':1.81009, '1.25':1.66618, '1.5':1.55193, '2':1.39988, '2.5':1.28421, '3':1.20432, '4':1.0753, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Tee Line Flow: Flanged tee line flow type (สามทางไหลตรง)': {img:'/ezypipe/7r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.264129, '1.25':0.239849, '1.5':0.217778, '2':0.196347, '2.5':0.17347, '3':0.159538, '4':0.138924, '5':0.127779, '6':0.115386, '8':0.1014, '10':0.0919104, '12':0.0849938, '14':0.0798976, '16':0.0756546, '18':0.0705933, '20':0.0678255, '24':0.0620367},
    'Tee Branch Flow: Flanged tee branch flow type (สามทางไหลแยก)': {img:'/ezypipe/7r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':0.999988, '1.25':0.913849, '1.5':0.859326, '2':0.798406, '2.5':0.747735, '3':0.703116, '4':0.658215, '5':0.608366, '6':0.580757, '8':0.534523, '10':0.497776, '12':0.475174, '14':0.455419, '16':0.440672, '18':0.425638, '20':0.409604, '24':0.393984},
    'Y-Strainer (เครื่องกรองตัว Y)': {img:'/ezypipe/8r.png', '0.375':8.59242, '0.5':6.62412, '0.75':6.04118, '1':5.11247, '1.25':4.89571, '1.5':4.74778, '2':4.50752, '2.5':3.59555, '3':3.48407, '4':2.82209, '5':2.9124, '6':2.75284, '8':2.73593, '10':2.16172, '12':2.34562, '14':2.27699, '16':2.92744, '18':2.88656, '20':'ไม่มี', '24':'ไม่มี'},
    'Basket strainer (เครื่องกรอง)': {img:'/ezypipe/9r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':1.88555, '1.5':1.69895, '2':1.4715, '2.5':1.32112, '3':1.19252, '4':1.03101, '5':0.920677, '6':0.838558, '8':0.715927, '10':0.646239, '12':0.584383, '14':0.542884, '16':0.506146, '18':0.482179, '20':0.458523, '24':0.409453},
    'Basket strainer: Strainer bucket with foot valve (เครื่องกรองแบบมีฟุตวาล์ว)': {img:'/ezypipe/9r.png', '0.375':5.5, '0.5':5.5, '0.75':5.5, '1':5.5, '1.25':5.5, '1.5':5.5, '2':5.5, '2.5':5.5, '3':5.5, '4':5.5, '5':5.5, '6':5.5, '8':5.5, '10':5.5, '12':5.5, '14':5.5, '16':5.5, '18':5.5, '20':5.5, '24':5.5},
    'Basket strainer: Strainer bucket without foot valve (เครื่องกรองแบบไม่มีฟุตวาล์ว)': {img:'/ezypipe/9r.png', '0.375':1.8, '0.5':1.8, '0.75':1.8, '1':1.8, '1.25':1.8, '1.5':1.8, '2':1.8, '2.5':1.8, '3':1.8, '4':1.8, '5':1.8, '6':1.8, '8':1.8, '10':1.8, '12':1.8, '14':1.8, '16':1.8, '18':1.8, '20':1.8, '24':1.8},
    'Foot valve (ฟุตวาล์ว)': {img:'/ezypipe/10r.png', '0.375':0.8, '0.5':0.8, '0.75':0.8, '1':0.8, '1.25':0.8, '1.5':0.8, '2':0.8, '2.5':0.8, '3':0.8, '4':0.8, '5':0.8, '6':0.8, '8':0.8, '10':0.8, '12':0.8, '14':0.8, '16':0.8, '18':0.8, '20':0.8, '24':'ไม่มี'},
    'Globe valve: Screwed type (โกลบวาล์ว)': {img:'/ezypipe/11r.png', '0.375':15, '0.5':13.863, '0.75':9.97846, '1':8.43483, '1.25':7.7047, '1.5':7.15826, '2':6.51452, '2.5':6.06435, '3':5.8406, '4':5.42721, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Globe valve: Flanged type (โกลบวาล์ว)': {img:'/ezypipe/11r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':12.8424, '1.25':11.283, '1.5':10.0879, '2':8.63337, '2.5':7.81402, '3':7.10964, '4':6.44616, '5':6.06331, '6':5.83439, '8':5.48787, '10':5.35509, '12':5.29918, '14':5.28992, '16':5.30846, '18':5.28067, '20':5.27144, '24':5.25303},
    'Globe valve (โกลบวาล์ว)': {img:'/ezypipe/12r.png', '0.375':10, '0.5':10, '0.75':10, '1':10, '1.25':10, '1.5':10, '2':10, '2.5':10, '3':10, '4':10, '5':10, '6':10, '8':10, '10':10, '12':10, '14':10, '16':10, '18':10, '20':10, '24':10},
    'Gate valve: Screwed type (ประตูน้ำ)': {img:'/ezypipe/13r.png', '0.375':3.7, '0.5':0.332955, '0.75':0.272511, '1':0.239197, '1.25':0.21256, '1.5':0.195773, '2':0.171038, '2.5':0.152466, '3':0.140864, '4':0.122874, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Gate valve: Flanged type (ประตูน้ำ)': {img:'/ezypipe/13r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':0.4, '2.5':0.275, '3':0.219592, '4':0.157846, '5':0.124846, '6':0.101791, '8':0.0736479, '10':0.058632, '12':0.0474936, '14':0.0406193, '16':0.0347386, '18':0.0305608, '20':'ไม่มี', '24':'ไม่มี'},
    'Angle valve (วาล์ว 90 องศา)': {img:'/ezypipe/14r.png', '0.375':5, '0.5':5, '0.75':5, '1':5, '1.25':5, '1.5':5, '2':5, '2.5':5, '3':5, '4':5, '5':5, '6':5, '8':5, '10':5, '12':5, '14':5, '16':5, '18':5, '20':5, '24':5},
    'Angle valve: Screwed type (วาล์วมุม)': {img:'/ezypipe/15r.png', '0.375':'ไม่มี', '0.5':5.69959, '0.75':4.4707, '1':3.47609, '1.25':2.87248, '1.5':2.04164, '2':1.58743, '2.5':1.32523, '3':1.00144, '4':'ไม่มี', '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Angle valve: Flanged type (วาล์วมุม 90 องศา)': {img:'/ezypipe/15r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':4.33631, '1.25':3.50203, '1.5':3.00126, '2':2.4709, '2.5':2.22404, '3':2.10693, '4':2.02119, '5':2.02672, '6':2.03754, '8':2.04432, '10':2.04202, '12':2.03113, '14':2.04676, '16':2.02715, '18':2.02344, '20':2.04134, '24':'ไม่มี'},
    'Check valve: Swing type screwed end (วาล์วกันกลับ)': {img:'/ezypipe/16r.png', '0.375':6, '0.5':5.5, '0.75':3, '1':2.12726, '1.25':1.75988, '1.5':1.54836, '2':1.34732, '2.5':1.24647, '3':1.18888, '4':1.13729, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Check valve: Swing type flanged end (วาล์วกันกลับ)': {img:'/ezypipe/16r.png', '0.375':2, '0.5':2, '0.75':2, '1':2, '1.25':2, '1.5':2, '2':2, '2.5':2, '3':2, '4':2, '5':2, '6':2, '8':2, '10':2, '12':2, '14':2, '16':2, '18':2, '20':2, '24':2},
    'Check valve: Swing type (วาล์วกันกลับ)': {img:'/ezypipe/17r.png', '0.375':2.5, '0.5':2.5, '0.75':2.5, '1':2.5, '1.25':2.5, '1.5':2.5, '2':2.5, '2.5':2.5, '3':2.5, '4':2.5, '5':2.5, '6':2.5, '8':2.5, '10':2.5, '12':2.5, '14':2.5, '16':2.5, '18':2.5, '20':2.5, '24':2.5},
    'Check valve: Silent wafer type (วาล์วกันกลับ)': {img:'/ezypipe/18r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':5.55756, '2.5':6.54333, '3':8.31023, '4':6.86118, '5':7.12469, '6':6.76065, '8':6.86118, '10':7.44486, '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Check valve: Ball type (วาล์วกันกลับ)': {img:'/ezypipe/17r.png', '0.375':70, '0.5':70, '0.75':70, '1':70, '1.25':70, '1.5':70, '2':70, '2.5':70, '3':70, '4':70, '5':70, '6':70, '8':70, '10':70, '12':70, '14':70, '16':70, '18':70, '20':70, '24':70},
    'Check valve: Lift type (วาล์วกันกลับ)': {img:'/ezypipe/17r.png', '0.375':12, '0.5':12, '0.75':12, '1':12, '1.25':12, '1.5':12, '2':12, '2.5':12, '3':12, '4':12, '5':12, '6':12, '8':12, '10':12, '12':12, '14':12, '16':12, '18':12, '20':12, '24':12},
    'Butterfly valve (วาล์วลิ้นปีกผีเสื้อ)': {img:'/ezypipe/19r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':0.9215, '2':1.76182, '2.5':1.9117, '3':1.3657, '4':1.42707, '5':1.31941, '6':0.802729, '8':0.913327, '10':0.728099, '12':0.874049, '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Water meter (มิเตอร์น้ำ)': {img:'/ezypipe/20r.png', '0.375':'ไม่มี', '0.5':2.17754, '0.75':6.37817, '1':8.96143, '1.25':12.9136, '1.5':16.8657, '2':17.1748, '2.5':16.7441, '3':10.5397, '4':12.3836, '5':6.85303, '6':3.37391, '8':3.13679, '10':4.16533, '12':3.83876, '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Couplings and unions (ข้อต่อยูเนี่ยน)': {img:'/ezypipe/21r.png', '0.375':0.158, '0.5':0.1288, '0.75':0.0986359, '1':0.0803364, '1.25':0.0698699, '1.5':0.0621553, '2':0.0513547, '2.5':0.0450313, '3':0.0395701, '4':0.0330982, '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Bell-mouth inlet or reducer (ปากทางดูดแบบปากแตร)': {img:'/ezypipe/22r.png', '0.375':'ไม่มี', '0.5':0.05, '0.75':0.05, '1':0.05, '1.25':0.05, '1.5':0.05, '2':0.05, '2.5':0.05, '3':0.05, '4':0.05, '5':0.05, '6':0.05, '8':0.05, '10':0.05, '12':0.05, '14':0.05, '16':0.05, '18':0.05, '20':0.05, '24':0.05},
    'Square edge inlet (ท่อดูดที่ผนัง)': {img:'/ezypipe/23r.png', '0.375':0.5, '0.5':0.5, '0.75':0.5, '1':0.5, '1.25':0.5, '1.5':0.5, '2':0.5, '2.5':0.5, '3':0.5, '4':0.5, '5':0.5, '6':0.5, '8':0.5, '10':0.5, '12':0.5, '14':0.5, '16':0.5, '18':0.5, '20':0.5, '24':0.5},
    'Inward projecting pipe (ท่อดูดยื่นเข้าด้านใน)': {img:'/ezypipe/24r.png', '0.375':1, '0.5':1, '0.75':1, '1':1, '1.25':1, '1.5':1, '2':1, '2.5':1, '3':1, '4':1, '5':1, '6':1, '8':1, '10':1, '12':1, '14':1, '16':1, '18':1, '20':1, '24':1},
    'Square edged inlet (ทางเข้าขอบสี่เหลี่ยม)': {img:'/ezypipe/23r.png', '0.375':0.5, '0.5':0.5, '0.75':0.5, '1':0.5, '1.25':0.5, '1.5':0.5, '2':0.5, '2.5':0.5, '3':0.5, '4':0.5, '5':0.5, '6':0.5, '8':0.5, '10':0.5, '12':0.5, '14':0.5, '16':0.5, '18':0.5, '20':0.5, '24':0.5},
    'Exit from pipe into reservoir (ทางออกท่อเข้าถังเก็บน้ำ)': {img:'/ezypipe/25r.png', '0.375':1, '0.5':1, '0.75':1, '1':1, '1.25':1, '1.5':1, '2':1, '2.5':1, '3':1, '4':1, '5':1, '6':1, '8':1, '10':1, '12':1, '14':1, '16':1, '18':1, '20':1, '24':1},
    'Balancing valve  (วาล์วปรับสมดุล)': {img:'/ezypipe/26r.png', '0.375':15.5, '0.5':13.5, '0.75':9.1, '1':6.1, '1.25':4.8, '1.5':3.7, '2':2.4, '2.5':4.9, '3':5.5, '4':9.2, '5':7.3, '6':6.5, '8':7.8, '10':4.6, '12':6, '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'},
    'Sudden enlargement (ท่อเปลี่ยนขนาดหน้าตัดแบบเหลี่ยม)': {img:'/ezypipe/27r.png', '0.375':1, '0.5':1, '0.75':1, '1':1, '1.25':1, '1.5':1, '2':1, '2.5':1, '3':1, '4':1, '5':1, '6':1, '8':1, '10':1, '12':1, '14':1, '16':1, '18':1, '20':1, '24':1},
    'Confusor (ข้อขยาย) ': {img:'/ezypipe/28r.png', '0.375':0.32, '0.5':0.32, '0.75':0.32, '1':0.32, '1.25':0.32, '1.5':0.32, '2':0.32, '2.5':0.32, '3':0.32, '4':0.32, '5':0.32, '6':0.32, '8':0.32, '10':0.32, '12':0.32, '14':0.32, '16':0.32, '18':0.32, '20':0.32, '24':0.32},
    'Diffusor: D=1.5d (ข้อลด)': {img:'/ezypipe/29r.png', '0.375':1, '0.5':1, '0.75':1, '1':1, '1.25':1, '1.5':1, '2':1, '2.5':1, '3':1, '4':1, '5':1, '6':1, '8':1, '10':1, '12':1, '14':1, '16':1, '18':1, '20':1, '24':1},
    'Diffusor: D=3d (ข้อลด)': {img:'/ezypipe/29r.png', '0.375':1.22, '0.5':1.22, '0.75':1.22, '1':1.22, '1.25':1.22, '1.5':1.22, '2':1.22, '2.5':1.22, '3':1.22, '4':1.22, '5':1.22, '6':1.22, '8':1.22, '10':1.22, '12':1.22, '14':1.22, '16':1.22, '18':1.22, '20':1.22, '24':1.22},
    'Flexible connector: Bellow type (ข้อต่ออ่อน)': {img:'/ezypipe/30r.png', '0.375':1.7, '0.5':1.7, '0.75':1.7, '1':1.7, '1.25':1.7, '1.5':1.7, '2':1.7, '2.5':1.7, '3':1.7, '4':1.6, '5':1.6, '6':1.6, '8':1.6, '10':1.7, '12':1.8, '14':1.95, '16':2.1, '18':2.2, '20':2.3, '24':2.5},
    'Ball valve (บอลวาล์ว)': {img:'/ezypipe/31r.png', '0.375':2.58208, '0.5':1.92465, '0.75':1.84695, '1':1.76925, '1.25':1.58208, '1.5':1.31449, '2':1.0469, '2.5':0.970785, '3':0.970785, '4':0.670014, '5':0.676503, '6':0.648902, '8':0.621302, '10':0.572592, '12':0.546066, '14':0.503255, '16':0.544676, '18':0.495483, '20':0.903349, '24':'ไม่มี'},
    'Pump control valve': {img:'/ezypipe/32r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':'ไม่มี', '2.5':4.7176, '3':5.44385, '4':5.97071, '5':5.70829, '6':2.63445, '8':1.80614, '10':2.16172, '12':2.0225, '14':2.78931, '16':3.14638, '18':2.24733, '20':1.62102, '24':'ไม่มี'},
    'Float valve (วาล์วลูกลอย)': {img:'/ezypipe/33r.png', '0.375':7.8494, '0.5':17.4118, '0.75':11.6079, '1':15.1613, '1.25':6.02485, '1.5':12.4931, '2':5.61, '2.5':7.19364, '3':5.16715, '4':6.20058, '5':7.70825, '6':6.45625, '8':6.55996, '10':17.8252, '12':20.496, '14':21.324, '16':31.9994, '18':38.7117, '20':'ไม่มี', '24':'ไม่มี'},
    'Mitre bend 45 deg': {img:'/ezypipe/34r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':0.027075, '2.5':0.022248, '3':0.02304, '4':0.0213775, '5':0.020192, '6':0.01895, '8':0.017465, '10':0.017542, '12':0.0161633, '14':0.0152379, '16':0.0152344, '18':0.0140667, '20':0.014112, '24':0.014145},
    '3-way plug valve line flow': {img:'/ezypipe/35r.png', '0.375':0.09184, '0.5':0.08424, '0.75':0.0686667, '1':0.06026, '1.25':0.6072, '1.5':0.5642, '2':0.49115, '2.5':0.044424, '3':0.04602, '4':0.0427975, '5':0.040384, '6':0.0379, '8':0.0349125, '10':0.03507, '12':0.0323375, '14':0.0304664, '16':0.0304687, '18':0.0281267, '20':0.028224, '24':0.028285},
    '2-way plug valve': {img:'/ezypipe/36r.png', '0.375':0.0552533, '0.5':0.05022, '0.75':0.0413333, '1':0.03611, '1.25':0.36432, '1.5':0.3388, '2':0.2945, '2.5':0.02664, '3':0.0276, '4':0.02567, '5':0.024224, '6':0.02275, '8':0.0209475, '10':0.21042, '12':0.0194025, '14':0.0182836, '16':0.0182812, '18':0.0168733, '20':0.016932, '24':0.01697},
    'Sanitary fixture (สุขภัณฑ์)': {img:'/ezypipe/40r.png', '0.375':'ไม่มี', '0.5':'ไม่มี', '0.75':'ไม่มี', '1':'ไม่มี', '1.25':'ไม่มี', '1.5':'ไม่มี', '2':'ไม่มี', '2.5':'ไม่มี', '3':'ไม่มี', '4':'ไม่มี', '5':'ไม่มี', '6':'ไม่มี', '8':'ไม่มี', '10':'ไม่มี', '12':'ไม่มี', '14':'ไม่มี', '16':'ไม่มี', '18':'ไม่มี', '20':'ไม่มี', '24':'ไม่มี'}
};

const pipeRoughnessC: Record<string, { [key: string]: number }> = {
    "PPR: PN10": { "plumbing-condenser": 150, "chilled-water": 150 },
    "PPR: PN20": { "plumbing-condenser": 150, "chilled-water": 150 },
    "PVC:8.5": { "plumbing-condenser": 150, "chilled-water": 150 },
    "PVC:13.5": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN4 SDR 41": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN6.3 SDR 26": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 8 SDR 21": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 10 SDR 17": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 12.5 SDR 13.6 ": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 16 SDR 11": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 20 SDR 9": { "plumbing-condenser": 150, "chilled-water": 150 },
    "HDPE: PN 25 SDR 7.4": { "plumbing-condenser": 150, "chilled-water": 150 },
    "Steel: 40(S)": { "plumbing-condenser": 100, "chilled-water": 140 },
    "Steel: 60(X)": { "plumbing-condenser": 100, "chilled-water": 140 },
    "Steel: 80(X)": { "plumbing-condenser": 100, "chilled-water": 140 },
    "GSP: BS-M": { "plumbing-condenser": 100, "chilled-water": 140 },
};

const G_IP = 32.2; // ft/s^2
const G_SI = 9.81; // m/s^2
const GPM_TO_LPM = 3.78541;

interface IpRow {
    id: number;
    description: string;
    customDescription: string;
    pipeType: string;
    flow: number | string;
    pipeSize: number | string;
    quantity: number | string;
    pipeId: number | string;
    coeffValue: number | string;
    checkSize: string;
    velocity: number | string;
    frictionLoss100: number | string;
    majorLoss: number | string;
    minorLoss: number | string;
    headLoss: number | string;
}

interface SiRow {
    id: number;
    description: string;
    customDescription: string;
    pipeType: string;
    flowLpm: number | string;
    flowGpm: number | string;
    pipeSizeSi: number | string;
    quantity: number | string;
    coeffValue: number | string;
    sizeInch: string;
    checkSize: string;
    velocity: number | string;
    frictionLoss100: number | string;
    majorLoss: number | string;
    minorLoss: number | string;
    headLoss: number | string;
}

interface Results {
    totalMajorLoss: number;
    totalMinorLoss: number;
    totalFrictionLoss: number;
    staticHead: number;
    totalDynamicHead: number;
    status: string;
}



const TooltipContext = createContext({
    open: false,
    setOpen: (open) => {},
});

const TooltipProvider = ({ children }) => <>{children}</>;

const Tooltip = ({ children }) => {
    const [open, setOpen] = useState(false);
    return (
        <TooltipContext.Provider value={{ open, setOpen }}>
            <div className="relative inline-flex">{children}</div>
        </TooltipContext.Provider>
    );
};

const TooltipTrigger = ({ children }) => {
    const { setOpen } = useContext(TooltipContext);
    return (
        <div onMouseEnter={() => setOpen(true)} onMouseLeave={() => setOpen(false)}>
            {children}
        </div>
    );
};

const TooltipContent = ({ children }) => {
    const { open } = useContext(TooltipContext);
    if (!open) return null;
    return (
        <div className="absolute z-10 px-3 py-1.5 text-sm font-medium text-white bg-gray-900 rounded-lg shadow-sm bottom-full mb-2 left-1/2 -translate-x-1/2 whitespace-nowrap">
            {children}
            <div className="absolute left-1/2 -translate-x-1/2 top-full w-0 h-0 border-x-4 border-x-transparent border-t-4 border-t-gray-900"></div>
        </div>
    );
};


const SuctionLiftDiagram = () => (
    <div className="p-4 border rounded-lg bg-slate-50">
        <h3 className="mb-2 text-lg font-semibold text-center text-gray-700">Suction Lift</h3>
        <svg viewBox="0 0 500 650" className="w-full h-auto font-sans">
            <defs>
                <linearGradient id="waterGradientSL" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" style={{ stopColor: '#38bdf8', stopOpacity: 1 }} />
                    <stop offset="100%" style={{ stopColor: '#0ea5e9', stopOpacity: 1 }} />
                </linearGradient>
                <filter id="softShadowSL" x="-30%" y="-30%" width="160%" height="160%">
                    <feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur" />
                    <feOffset in="blur" dx="3" dy="3" result="offsetBlur" />
                    <feMerge>
                        <feMergeNode in="offsetBlur" />
                        <feMergeNode in="SourceGraphic" />
                    </feMerge>
                </filter>
                <marker id="arrowheadSL" viewBox="0 0 10 10" refX="5" refY="5"
                    markerWidth="6" markerHeight="6" orient="auto-start-reverse">
                    <path d="M 0 0 L 10 5 L 0 10 z" fill="#475569" />
                </marker>
            </defs>
            <g filter="url(#softShadowSL)">
                
                <rect x="50" y="450" width="200" height="150" fill="url(#waterGradientSL)" rx="5" />
                <path d="M 50 455 Q 150 435, 250 455" stroke="#7dd3fc" strokeWidth="2" fill="none" />
                <rect x="50" y="440" width="200" height="10" fill="#f0f9ff" stroke="#38bdf8" strokeWidth="1.5" rx="3" />
                
                <rect x="350" y="100" width="120" height="80" fill="url(#waterGradientSL)" rx="5" />
                <path d="M 350 105 Q 410 95, 470 105" stroke="#7dd3fc" strokeWidth="2" fill="none" />
                <rect x="350" y="90" width="120" height="10" fill="#f0f9ff" stroke="#38bdf8" strokeWidth="1.5" rx="3" />

                <path d="M 145 500 V 320 Q 150 280, 190 280 H 240" stroke="#94a3b8" strokeWidth="20" fill="none" strokeLinejoin="round" strokeLinecap="round" />
                <path d="M 320 280 H 400 Q 410 280, 410 270 V 180" stroke="#94a3b8" strokeWidth="20" fill="none" strokeLinejoin="round" strokeLinecap="round" />

                <g transform="translate(280, 280)">
                    <circle cx="0" cy="0" r="40" fill="#475569" />
                    <circle cx="-10" cy="0" r="15" fill="#64748b" stroke="#475569" strokeWidth="2" />
                    <rect x="-10" y="-60" width="20" height="20" fill="#64748b" />
                    <rect x="-25" y="40" width="50" height="10" fill="#334155" rx="3" />
                </g>
            </g>


            <line x1="280" y1="280" x2="280" y2="450" stroke="#ef4444" strokeWidth="2" strokeDasharray="4 4" />
            <path d="M 275 285 L 280 280 L 285 285" fill="none" stroke="#ef4444" strokeWidth="2" />
            <path d="M 275 445 L 280 450 L 285 445" fill="none" stroke="#ef4444" strokeWidth="2" />
            <text x="290" y="365" fill="#ef4444" fontWeight="bold" fontSize="20" dominantBaseline="middle">ΔZ</text>

        </svg>
    </div>
);

const FloodedSuctionDiagram = () => (
    <div className="p-4 border rounded-lg bg-slate-50">
        <h3 className="mb-2 text-lg font-semibold text-center text-gray-700">Flooded Suction</h3>
        <svg viewBox="0 0 500 650" className="w-full h-auto font-sans">
            <defs>
                <linearGradient id="waterGradientFS" x1="0%" y1="0%" x2="0%" y2="100%">
                    <stop offset="0%" style={{ stopColor: '#38bdf8', stopOpacity: 1 }} />
                    <stop offset="100%" style={{ stopColor: '#0ea5e9', stopOpacity: 1 }} />
                </linearGradient>
                <filter id="softShadowFS" x="-30%" y="-30%" width="160%" height="160%">
                    <feGaussianBlur in="SourceAlpha" stdDeviation="4" result="blur" />
                    <feOffset in="blur" dx="3" dy="3" result="offsetBlur" />
                    <feMerge>
                        <feMergeNode in="offsetBlur" />
                        <feMergeNode in="SourceGraphic" />
                    </feMerge>
                </filter>
                <marker id="arrowheadFS" viewBox="0 0 10 10" refX="5" refY="5"
                    markerWidth="6" markerHeight="6" orient="auto-start-reverse">
                    <path d="M 0 0 L 10 5 L 0 10 z" fill="#475569" />
                </marker>
            </defs>
            <g filter="url(#softShadowFS)">
                <rect x="50" y="150" width="200" height="200" fill="url(#waterGradientFS)" rx="5" />
                <path d="M 50 155 Q 150 135, 250 155" stroke="#7dd3fc" strokeWidth="2" fill="none" />
                <rect x="50" y="140" width="200" height="10" fill="#f0f9ff" stroke="#38bdf8" strokeWidth="1.5" rx="3" />

                <rect x="350" y="100" width="120" height="80" fill="url(#waterGradientFS)" rx="5" />
                <path d="M 350 105 Q 410 95, 470 105" stroke="#7dd3fc" strokeWidth="2" fill="none" />
                <rect x="350" y="90" width="120" height="10" fill="#f0f9ff" stroke="#38bdf8" strokeWidth="1.5" rx="3" />


                <path d="M 145 350 V 400 H 240" stroke="#94a3b8" strokeWidth="20" fill="none" strokeLinejoin="round" strokeLinecap="round" />


                <path d="M 320 400 H 380 Q 410 400, 410 370 V 180" stroke="#94a3b8" strokeWidth="20" fill="none" strokeLinejoin="round" strokeLinecap="round" />


                <g transform="translate(280, 400)">
                    <circle cx="0" cy="0" r="40" fill="#475569" />
                    <circle cx="-10" cy="0" r="15" fill="#64748b" stroke="#475569" strokeWidth="2" />
                    <rect x="-10" y="-60" width="20" height="20" fill="#64748b" />
                    <rect x="-25" y="40" width="50" height="10" fill="#334155" rx="3" />
                </g>
            </g>

            <line x1="280" y1="150" x2="280" y2="400" stroke="#ef4444" strokeWidth="2" strokeDasharray="4 4" />
            <path d="M 275 155 L 280 150 L 285 155" fill="none" stroke="#ef4444" strokeWidth="2" />
            <path d="M 275 395 L 280 400 L 285 395" fill="none" stroke="#ef4444" strokeWidth="2" />
            <text x="290" y="275" fill="#ef4444" fontWeight="bold" fontSize="20" dominantBaseline="middle">ΔZ</text>
            
        </svg>
    </div>
);


const NPSHaCalculator = () => {
    const [mode, setMode] = useState('flooded');
    const [inputs, setInputs] = useState({
        temp: '25',
        patm: '33.4',
        deltaP: '10',
        deltaZ: '9',
    });
    const [results, setResults] = useState({
        pvapor: 0,
        psuctionFt: 0,
        psuctionPsi: 0,
        npshaFt: 0,
        npshaPsi: 0,
    });

    const FTWG_TO_PSI = 0.4335;
    const inputClasses = "w-full px-3 py-2 text-base text-center text-gray-700 bg-white border border-gray-300 rounded-md transition duration-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/25 focus:outline-none";

    const vaporPressureData = {
        0: 0.20, 5: 0.28, 10: 0.40, 15: 0.56, 20: 0.77, 25: 1.04, 30: 1.39,
        35: 1.83, 40: 2.38, 45: 3.08, 50: 3.95, 55: 5.02, 60: 6.34,
        65: 7.93, 70: 9.85, 75: 12.15, 80: 14.89, 85: 18.14, 90: 21.96,
        95: 26.43, 100: 31.62
    };

    const getVaporPressure = (tempC) => {
        const temps = Object.keys(vaporPressureData).map(Number);
        if (tempC <= temps[0]) return vaporPressureData[temps[0]];
        if (tempC >= temps[temps.length - 1]) return vaporPressureData[temps[temps.length - 1]];

        let lowerTemp = temps[0];
        let upperTemp = temps[temps.length - 1];

        for (let i = 0; i < temps.length - 1; i++) {
            if (tempC >= temps[i] && tempC < temps[i + 1]) {
                lowerTemp = temps[i];
                upperTemp = temps[i + 1];
                break;
            }
        }
        
        const lowerP = vaporPressureData[lowerTemp];
        const upperP = vaporPressureData[upperTemp];
        
        return lowerP + ((tempC - lowerTemp) / (upperTemp - lowerTemp)) * (upperP - lowerP);
    };

    const handleInputChange = (field, value) => {
        if (field === 'deltaZ') {
            const numericValue = parseFloat(value);
            if (numericValue < 0) {
                value = '0';
            }
        }
        setInputs(prev => ({ ...prev, [field]: value }));
    };

    useEffect(() => {
        const temp = parseFloat(inputs.temp) || 0;
        const patm = parseFloat(inputs.patm) || 0;
        const deltaP = parseFloat(inputs.deltaP) || 0;
        const deltaZ = parseFloat(inputs.deltaZ) || 0;

        const pvapor = getVaporPressure(temp);
        
        const zFactor = mode === 'flooded' ? 1 : -1;

        const psuctionFt = zFactor * deltaZ - deltaP;
        const npshaFt = patm - pvapor - deltaP + (zFactor * deltaZ);

        setResults({
            pvapor,
            psuctionFt,
            psuctionPsi: psuctionFt * FTWG_TO_PSI,
            npshaFt,
            npshaPsi: npshaFt * FTWG_TO_PSI
        });
    }, [inputs, mode]);

    const modeConfig = {
        flooded: {
            deltaZ_initial: '9',
            temp_initial: '25',
        },
        suctionLift: {
            deltaZ_initial: '6',
            temp_initial: '28',
        }
    };
    
    const handleModeChange = (newMode) => {
        setMode(newMode);
        setInputs(prev => ({
            ...prev,
            deltaZ: modeConfig[newMode].deltaZ_initial,
            temp: modeConfig[newMode].temp_initial,
            patm: '33.4',
            deltaP: '10'
        }));
    };

    return (
        <div className="p-4 bg-white border border-gray-200 shadow-lg md:p-6 rounded-xl">
            <h2 className="mb-4 text-2xl font-bold text-center text-transparent bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text">NPSHa Calculation</h2>
            
            <div className="flex justify-center mb-8">
                <div className="flex p-1 space-x-1 bg-gray-200 rounded-lg">
                    <button 
                        onClick={() => handleModeChange('suctionLift')}
                        className={`py-2 px-6 text-base font-medium transition-all duration-300 rounded-md ${mode === 'suctionLift' ? 'bg-blue-500 text-white shadow' : 'text-gray-600 hover:bg-gray-300'}`}>
                        Suction Lift
                    </button>
                    <button 
                        onClick={() => handleModeChange('flooded')}
                        className={`py-2 px-6 text-base font-medium transition-all duration-300 rounded-md ${mode === 'flooded' ? 'bg-blue-500 text-white shadow' : 'text-gray-600 hover:bg-gray-300'}`}>
                        Flooded Suction
                    </button>
                </div>
            </div>

            <div className="grid grid-cols-1 gap-8 md:grid-cols-2 md:gap-16 md:items-start">
                <div className="w-full">
                    {mode === 'flooded' ? <FloodedSuctionDiagram /> : <SuctionLiftDiagram />}
                </div>

                <div className="w-full max-w-lg mx-auto space-y-8">
                    <div className="p-4 border rounded-lg shadow-sm bg-slate-50">
                        <div className="grid grid-cols-2 gap-4">
                            <div>
                                <label className="block mb-1 text-sm font-medium text-gray-700">Water Temp (°C)</label>
                                <input type="number" value={inputs.temp} onChange={(e) => handleInputChange('temp', e.target.value)} className={inputClasses} />
                            </div>
                            <div>
                                <label className="flex items-center mb-1 text-sm font-medium text-gray-700">
                                    Suction Head loss (ft)
                                </label>
                                <input type="number" value={inputs.deltaP} onChange={(e) => handleInputChange('deltaP', e.target.value)} className={inputClasses} />
                            </div>
                            <div>
                                <label className="flex items-center mb-1 text-sm font-medium text-gray-700">
                                    ΔZ (ft) 
                                    <TooltipProvider>
                                        <Tooltip>
                                            <TooltipTrigger>
                                                <span className="cursor-help">
                                                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-500">
                                                      <circle cx="12" cy="12" r="10"></circle>
                                                      <line x1="12" y1="16" x2="12" y2="12"></line>
                                                      <line x1="12" y1="8" x2="12.01" y2="8"></line>
                                                  </svg>
                                                </span>
                                            </TooltipTrigger>
                                            <TooltipContent>
                                                <p>Enter only positive values.</p>
                                            </TooltipContent>
                                        </Tooltip>
                                    </TooltipProvider>
                                </label>
                                <input type="number" min="0" value={inputs.deltaZ} onChange={(e) => handleInputChange('deltaZ', e.target.value)} className={inputClasses} />
                            </div>
                            <div>
                                <label className="block mb-1 text-sm font-medium text-gray-700">Atmospheric Head (ft.wg)</label>
                                <input type="number" value={inputs.patm} onChange={(e) => handleInputChange('patm', e.target.value)} className={inputClasses} />
                            </div>
                        </div>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                        <div className="p-4 text-center bg-white border rounded-lg shadow-sm">
                            <h4 className="font-semibold text-gray-600">Psuction</h4>
                            <p className={`text-3xl font-bold my-2 ${results.psuctionFt < 0 ? 'text-red-500' : 'text-blue-500'}`}>{results.psuctionFt.toFixed(2)}</p>
                            <p className="text-sm text-gray-500">ft.wg</p>
                            <p className={`mt-2 text-lg font-semibold ${results.psuctionPsi < 0 ? 'text-red-500' : 'text-blue-500'}`}>{results.psuctionPsi.toFixed(3)}</p>
                            <p className="text-sm text-gray-500">Psi</p>
                        </div>
                        <div className="p-4 text-center bg-white border rounded-lg shadow-sm">
                            <h4 className="font-semibold text-gray-600">NPSHa</h4>
                            <p className="text-3xl font-bold text-green-500 my-2">{results.npshaFt.toFixed(2)}</p>
                            <p className="text-sm text-gray-500">ft.wg</p>
                            <p className="mt-2 text-lg font-semibold text-green-500">{results.npshaPsi.toFixed(3)}</p>
                            <p className="text-sm text-gray-500">Psi</p>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    );
};



const EzyPipeCal = () => {
    const [activeMode, setActiveMode] = useState<'ip' | 'si' | 'npsha'>('ip');
    const [systemType, setSystemType] = useState('plumbing-condenser');
    const [staticHead, setStaticHead] = useState<number | string>(0);
    const [isStaticHeadValid, setIsStaticHeadValid] = useState(true);
    const [isTooltipVisible, setIsTooltipVisible] = useState(false);
    const [ipRows, setIpRows] = useState<IpRow[]>([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [siRows, setSiRows] = useState<SiRow[]>([]);
    const dragItem = useRef<number | null>(null);
    const dragOverItem = useRef<number | null>(null);
    const [results, setResults] = useState<Results>({
        totalMajorLoss: 0,
        totalMinorLoss: 0,
        totalFrictionLoss: 0,
        staticHead: 0,
        totalDynamicHead: 0,
        status: 'Ready',
    });
    const [pipeRoughnessCValue, setPipeRoughnessCValue] = useState(120);
    const [isInfoModalOpen, setIsInfoModalOpen] = useState(false);

    const descriptionOptions = useMemo(() => [
        ...Object.keys(kValueData).map(key => ({ value: key, label: key })),
        { value: 'Custom', label: 'Custom Fitting' }
    ], []);

    const pipeTypeOptions = useMemo(() => [
        ...Object.keys(pipeSizeData).map(key => ({ value: key, label: key })),
        { value: 'Custom', label: 'Custom Pipe' }
    ], []);

    const findPipeData = (nominalInput: number | string, pipeTypeKey: string) => {
        if (!pipeSizeData[pipeTypeKey as PipeTypeKey]) return null;
        const sizes = pipeSizeData[pipeTypeKey as PipeTypeKey];
        const nominalValueStr = String(nominalInput);
        return sizes.find(size => size.nom_ip === nominalValueStr) || null;
    };

    const findClosestPipeDataSI = (nominalInput: number, pipeTypeKey: string) => {
        if (!pipeSizeData[pipeTypeKey as PipeTypeKey]) return null;
        if (isNaN(nominalInput)) return null;
        const sizes = pipeSizeData[pipeTypeKey as PipeTypeKey];
        if (!sizes || sizes.length === 0) return null;
        return sizes.reduce((prev, curr) => (Math.abs(Number(curr.nom_si) - nominalInput) < Math.abs(Number(prev.nom_si) - nominalInput) ? curr : prev));
    };
    
    const parseNumericInput = (value: any): number | '' => {
        if (value === '' || value === null || value === undefined) return '';
        const num = parseFloat(value);
        return isNaN(num) ? '' : num;
    };

    useEffect(() => {
        if (activeMode === 'ip' && ipRows.length === 0) handleAddRow();
        if (activeMode === 'si' && siRows.length === 0) handleAddRow();
    }, [activeMode]);
    
    useEffect(() => {
        
        const defaultCFactor = pipeRoughnessC['Steel: 40(S)']?.[systemType] ?? 120;
        setPipeRoughnessCValue(defaultCFactor);
    }, [systemType]);

    useEffect(() => {
        
        const updateRowCoeff = (row: any) => {
            if (row.description === 'Straight pipe (ท่อตรง)') {
                return { ...row, coeffValue: pipeRoughnessCValue };
            }
            return row;
        };
        setIpRows(prev => prev.map(updateRowCoeff));
        setSiRows(prev => prev.map(updateRowCoeff));
    }, [pipeRoughnessCValue]);


    // --- EVENT HANDLERS ---
    const handleSwitchMode = (mode: 'ip' | 'si' | 'npsha') => {
        setActiveMode(mode);
        setResults({
            totalMajorLoss: 0,
            totalMinorLoss: 0,
            totalFrictionLoss: 0,
            staticHead: Number(staticHead) || 0,
            totalDynamicHead: Number(staticHead) || 0,
            status: 'Ready',
        });
    };

    const handleAddRow = () => {
        const newId = Date.now();
        if (activeMode === 'ip') {
            const newRow: IpRow = {
                id: newId,
                description: 'Straight pipe (ท่อตรง)', customDescription: '', pipeType: 'Steel: 40(S)',
                flow: 250, pipeSize: 1.5, quantity: 1, pipeId: 1.61, coeffValue: pipeRoughnessCValue,
                checkSize: '-', velocity: '', frictionLoss100: '', majorLoss: '', minorLoss: '', headLoss: '',
            };
            setIpRows(prev => [...prev, newRow]);
        } else {
            const newRow: SiRow = {
                id: newId,
                description: 'Straight pipe (ท่อตรง)', customDescription: '', pipeType: 'Steel: 40(S)',
                flowLpm: 946.35, flowGpm: 250, pipeSizeSi: 50, quantity: 1, coeffValue: pipeRoughnessCValue,
                sizeInch: '1 1/2"', checkSize: '-', velocity: '', frictionLoss100: '', majorLoss: '', minorLoss: '', headLoss: '',
            };
            setSiRows(prev => [...prev, newRow]);
        }
    };

    const handleRemoveRow = (id: number) => {
        if (activeMode === 'ip') {
            setIpRows(prev => prev.filter(row => row.id !== id));
        } else {
            setSiRows(prev => prev.filter(row => row.id !== id));
        }
    };

    const handleIpRowChange = (id: number, field: keyof IpRow, value: any) => {
        setIpRows(prevRows => prevRows.map(row => {
            if (row.id !== id) return row;

            const newRow = { ...row, [field]: value };

            if (field === 'pipeType' && value !== 'Custom') {
                const availableSizes = pipeSizeData[value as PipeTypeKey] || [];
                if (availableSizes.length > 0) {
                    newRow.pipeSize = availableSizes[0].nom_ip;
                    const pipeData = findPipeData(newRow.pipeSize, newRow.pipeType);
                    newRow.pipeId = pipeData ? parseFloat(pipeData.id_in.toFixed(3)) : '';
                } else {
                    newRow.pipeSize = '';
                    newRow.pipeId = '';
                }
            } else if (field === 'pipeType' || field === 'pipeSize') {
                if (newRow.pipeType !== 'Custom') {
                    const pipeData = findPipeData(Number(newRow.pipeSize), newRow.pipeType);
                    newRow.pipeId = pipeData ? parseFloat(pipeData.id_in.toFixed(3)) : '';
                }
            }

            if (field === 'description' || field === 'pipeSize' || field === 'pipeType') {
                 if (value === 'Custom' || newRow.pipeType === 'Custom') {
                    newRow.checkSize = 'N/A';
                } else if (newRow.description === 'Straight pipe (ท่อตรง)') {
                    newRow.coeffValue = pipeRoughnessCValue; // Use global C-Factor
                } else if (kValueData[newRow.description as keyof typeof kValueData]) {
                    const pipeData = findPipeData(Number(newRow.pipeSize), newRow.pipeType);
                    const nominalSizeKey = pipeData ? pipeData.nom_ip : String(newRow.pipeSize);
                    const fittingData = kValueData[newRow.description as keyof typeof kValueData];
                    if (nominalSizeKey && fittingData && fittingData[nominalSizeKey] !== 'ไม่มี') {
                        newRow.coeffValue = fittingData[nominalSizeKey];
                    } else {
                        newRow.coeffValue = '';
                    }
                }
            }
            return newRow;
        }));
    };
    
    const handleSiRowChange = (id: number, field: keyof SiRow | 'pipeSizeIp', value: any) => {
        setSiRows(prevRows => prevRows.map(row => {
            if (row.id !== id) return row;
    
            let newRow = { ...row, [field]: value };
    
            if (field === 'flowLpm') {
                newRow.flowGpm = value === '' ? '' : Number(value) / GPM_TO_LPM;
            } else if (field === 'flowGpm') {
                newRow.flowLpm = value === '' ? '' : Number(value) * GPM_TO_LPM;
            }

            if (field === 'pipeSizeIp') { 
                const pipeData = findPipeData(value, newRow.pipeType);
                if (pipeData) {
                    newRow.pipeSizeSi = pipeData.nom_si;
                    newRow.sizeInch = pipeData.text_ip;
                }
            } else if (field === 'pipeType') {
                const availableSizes = pipeSizeData[newRow.pipeType as PipeTypeKey] || [];
                if (availableSizes.length > 0) {
                    const firstSize = availableSizes[0];
                    newRow.pipeSizeSi = firstSize.nom_si;
                    newRow.sizeInch = firstSize.text_ip;
                } else {
                    newRow.pipeSizeSi = '';
                    newRow.sizeInch = '-';
                }
            } else if (field === 'pipeSizeSi' && newRow.pipeType !== 'Custom') {
                 const pipeData = findClosestPipeDataSI(Number(newRow.pipeSizeSi), newRow.pipeType);
                 if (pipeData) {
                    newRow.pipeSizeSi = pipeData.nom_si;
                    newRow.sizeInch = pipeData.text_ip;
                 }
            }
            
            if (field === 'description' || field === 'pipeSizeSi' || field === 'pipeType' || field === 'pipeSizeIp') {
                if (newRow.description === 'Custom' || newRow.pipeType === 'Custom') {
                    newRow.checkSize = 'N/A';
                } else {
                    let pipeData = findPipeData(newRow.sizeInch.replace('"', ''), newRow.pipeType);
                    if (!pipeData) {
                        pipeData = findClosestPipeDataSI(Number(newRow.pipeSizeSi), newRow.pipeType)
                    }

                    if (newRow.description === 'Straight pipe (ท่อตรง)') {
                        newRow.coeffValue = pipeRoughnessCValue; // Use global C-Factor
                    } else if (kValueData[newRow.description as keyof typeof kValueData]) {
                        const nominalSizeKey = pipeData ? pipeData.nom_ip : null;
                        const fittingData = kValueData[newRow.description as keyof typeof kValueData];
                         if (nominalSizeKey && fittingData && fittingData[nominalSizeKey] !== 'ไม่มี') {
                             newRow.coeffValue = fittingData[nominalSizeKey];
                         } else {
                             newRow.coeffValue = '';
                         }
                    }
                }
            }
            return newRow;
        }));
    };

    const handleSort = () => {
        if (dragItem.current === null || dragOverItem.current === null) return;

        if (activeMode === 'ip') {
            const newIpRows = [...ipRows];
            const draggedItemContent = newIpRows.splice(dragItem.current, 1)[0];
            newIpRows.splice(dragOverItem.current, 0, draggedItemContent);
            dragItem.current = null;
            dragOverItem.current = null;
            setIpRows(newIpRows);
        } else {
            const newSiRows = [...siRows];
            const draggedItemContent = newSiRows.splice(dragItem.current, 1)[0];
            newSiRows.splice(dragOverItem.current, 0, draggedItemContent);
            dragItem.current = null;
            dragOverItem.current = null;
            setSiRows(newSiRows);
        }
    };
    
    // --- LOGIC ---
    const getCheckSizeMessage = (pipeSize: number, velocity: number, frictionLoss: number, unit: 'ip' | 'si') => {
        if (unit === 'ip') {
            if (pipeSize <= 2) {
                if (velocity <= 2) return "Too Large";
                if (velocity > 4) return "Too Small";
                return "OK";
            } else {
                if (velocity < 2) return "Too Large";
                if (velocity > 10 || frictionLoss > 4) return "Too Small";
                return "OK";
            }
        } else { // SI units
            const size_mm = pipeSize;
            if (size_mm <= 50) {
                if (velocity <= 0.6) return "Too Large";
                if (velocity > 1.2) return "Too Small";
                return "OK";
            } else {
                if (velocity < 0.6) return "Too Large";
                if (velocity > 3.0 || frictionLoss > 4) return "Too Small";
                return "OK";
            }
        }
    };

    const calculateAll = () => {
        if (staticHead === '' || isNaN(Number(staticHead))) {
            setIsStaticHeadValid(false);
            setResults(prev => ({ ...prev, status: 'Invalid Static Head' }));
            return;
        }
        setIsStaticHeadValid(true);
        setResults(prev => ({ ...prev, status: 'Calculating...' }));
    
        if (activeMode === 'ip') {
            let totalMajor = 0;
            let totalMinor = 0;
    
            const updatedRows = ipRows.map(row => {
                if (row.description === 'Custom') {
                    const customHeadLoss = parseNumericInput(row.headLoss) || 0;
                    totalMinor += customHeadLoss;
                    return row;
                }
    
                let newRow: IpRow = { ...row, velocity: '', frictionLoss100: '', majorLoss: '', minorLoss: '', headLoss: '', checkSize: '-' };
                const { flow, pipeId, description, quantity, coeffValue, pipeSize, pipeType } = newRow;
    
                if (Number(flow) > 0 && Number(pipeId) > 0) {
                    const flow_cfs = Number(flow) * 0.002228009;
                    const d_ft = Number(pipeId) / 12.0;
                    const area = (Math.PI * d_ft * d_ft) / 4.0;
                    const velocity = flow_cfs / area;
                    newRow.velocity = velocity;
    
                    if (description === 'Straight pipe (ท่อตรง)') {
                        if (Number(quantity) > 0) {
                            const C = Number(coeffValue) || 120;
                            const frictionLoss100 = 0.2083 * Math.pow(100 / C, 1.852) * Math.pow(Number(flow), 1.852) / Math.pow(Number(pipeId), 4.8655);
                            
                            if (isFinite(frictionLoss100)) {
                                const majorLoss = Number(quantity) * (frictionLoss100 / 100.0);
                                newRow.majorLoss = majorLoss;
                                newRow.frictionLoss100 = frictionLoss100;
                                newRow.headLoss = majorLoss;
                                if (pipeType !== 'Custom') {
                                    newRow.checkSize = getCheckSizeMessage(Number(pipeSize), velocity, frictionLoss100, 'ip');
                                } else {
                                    newRow.checkSize = 'N/A';
                                }
                                totalMajor += majorLoss;
                            }
                        }
                    } else { // Minor Loss Calculation
                        const k = Number(coeffValue);
                        if (!isNaN(k) && Number(quantity) > 0) {
                            const minorLoss = k * (velocity ** 2 / (2 * G_IP)) * Number(quantity);
                            newRow.minorLoss = minorLoss;
                            newRow.headLoss = minorLoss;
                            totalMinor += minorLoss;
                        }
                    }
                }
                return newRow;
            });
    
            setIpRows(updatedRows);
    
            const totalFriction = totalMajor + totalMinor;
            setResults({
                totalMajorLoss: totalMajor,
                totalMinorLoss: totalMinor,
                totalFrictionLoss: totalFriction,
                staticHead: Number(staticHead),
                totalDynamicHead: totalFriction + Number(staticHead),
                status: 'Completed',
            });
        } else { // SI Mode
            let totalMajor = 0;
            let totalMinor = 0;
    
            const updatedRows = siRows.map(row => {
                if (row.description === 'Custom') {
                    const customHeadLoss = parseNumericInput(row.headLoss) || 0;
                    totalMinor += customHeadLoss;
                    return row;
                }

                let newRow: SiRow = { ...row, velocity: '', frictionLoss100: '', majorLoss: '', minorLoss: '', headLoss: '', checkSize: '-' };
                const { flowLpm, pipeSizeSi, pipeType, description, quantity, coeffValue } = newRow;
                const flow_lps = Number(flowLpm) / 60.0;
    
                let id_mm = 0;
                let pipeData = null;
                if (pipeType === 'Custom') {
                    id_mm = Number(pipeSizeSi);
                } else {
                    const sizesForType = pipeSizeData[pipeType as PipeTypeKey] || [];
                    pipeData = sizesForType.find(p => p.nom_si === Number(pipeSizeSi) && p.text_ip === row.sizeInch) || findClosestPipeDataSI(Number(pipeSizeSi), pipeType);

                    if (pipeData) {
                        id_mm = pipeData.id_m;
                    }
                }
    
                if (flow_lps > 0 && id_mm > 0) {
                    const flow_m3s = flow_lps / 1000.0;
                    const d_m = id_mm / 1000.0;
                    const area = (Math.PI * d_m * d_m) / 4.0;
                    const velocity = flow_m3s / area;
                    newRow.velocity = velocity;
    
                    if (description === 'Straight pipe (ท่อตรง)') {
                        if (Number(quantity) > 0) {
                            const C = Number(coeffValue) || 120;
                            const L = Number(quantity);
                            const majorLoss = (10.67 * L * Math.pow(flow_m3s, 1.852)) / (Math.pow(C, 1.852) * Math.pow(d_m, 4.8704));

                            if (isFinite(majorLoss)) {
                                const frictionLoss100_SI = L > 0 ? (majorLoss / L) * 100.0 : 0;
                                newRow.majorLoss = majorLoss;
                                newRow.headLoss = majorLoss;
                                newRow.frictionLoss100 = frictionLoss100_SI;
                                if (pipeType !== 'Custom' && pipeData) {
                                   newRow.checkSize = getCheckSizeMessage(pipeData.nom_si, velocity, frictionLoss100_SI, 'si');
                                } else {
                                   newRow.checkSize = 'N/A';
                                }
                                totalMajor += majorLoss;
                            }
                        }
                    } else { 
                        if (Number(quantity) > 0) {
                            const kValue = Number(coeffValue);
                            if (!isNaN(kValue)) {
                                const minorLoss = kValue * (velocity ** 2 / (2 * G_SI)) * Number(quantity);
                                newRow.minorLoss = minorLoss;
                                newRow.headLoss = minorLoss;
                                totalMinor += minorLoss;
                            }
                        }
                    }
                }
                return newRow;
            });
    
            setSiRows(updatedRows);
    
            const totalFriction = totalMajor + totalMinor;
            setResults({
                totalMajorLoss: totalMajor,
                totalMinorLoss: totalMinor,
                totalFrictionLoss: totalFriction,
                staticHead: Number(staticHead),
                totalDynamicHead: totalFriction + Number(staticHead),
                status: 'Completed',
            });
        }
    };

    const ipRowsInputs = JSON.stringify(
        ipRows.map(row => ({
            description: row.description,
            customDescription: row.customDescription,
            pipeType: row.pipeType,
            flow: row.flow,
            pipeSize: row.pipeSize,
            quantity: row.quantity,
            pipeId: row.pipeId,
            coeffValue: row.coeffValue,
            ...(row.description === 'Custom' && {
                velocity: row.velocity,
                frictionLoss100: row.frictionLoss100,
                majorLoss: row.majorLoss,
                minorLoss: row.minorLoss,
                headLoss: row.headLoss,
            })
        }))
    );
    const siRowsInputs = JSON.stringify(
        siRows.map(row => ({
            description: row.description,
            customDescription: row.customDescription,
            pipeType: row.pipeType,
            flowLpm: row.flowLpm,
            flowGpm: row.flowGpm,
            pipeSizeSi: row.pipeSizeSi,
            quantity: row.quantity,
            coeffValue: row.coeffValue,
            ...(row.description === 'Custom' && {
                velocity: row.velocity,
                frictionLoss100: row.frictionLoss100,
                majorLoss: row.majorLoss,
                minorLoss: row.minorLoss,
                headLoss: row.headLoss,
            })
        }))
    );
        
    useEffect(() => {
        if (activeMode !== 'npsha') {
            calculateAll();
        }
    }, [ipRowsInputs, siRowsInputs, staticHead, systemType, activeMode]);


    const inputClasses = "w-full px-2 py-1 text-xs text-gray-700 bg-white border border-gray-300 rounded-md font-kanit transition duration-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-400/25 focus:outline-none";
    const actionBtnClasses = "px-4 py-2 text-sm bg-gray-200 text-gray-800 border border-gray-300 rounded-md font-kanit cursor-pointer transition-all duration-300 hover:bg-gray-300";
    const removeBtnClasses = "px-2 py-1 text-xs font-bold text-white bg-red-500 border-none rounded-lg cursor-pointer flex items-center justify-center mx-auto hover:bg-red-600";
    const outputCellClasses = "p-2 font-medium text-center bg-blue-50 text-blue-600";
    const editableOutputClasses = "w-full h-full p-2 text-center text-gray-700 bg-yellow-50 border-0 focus:ring-2 focus:ring-yellow-400 focus:outline-none";
    
    return (
        <div className="min-h-screen bg-slate-100 font-kanit text-gray-800 text-xs">
            <link rel="preconnect" href="https://fonts.googleapis.com" />
            <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600&display=swap" rel="stylesheet" />

            <header className="top-0 z-20 flex flex-col w-full px-6 py-2 bg-white border-b border-gray-200 shadow-sm md:flex-row md:items-center shrink-0">
                <div className="shrink-0">
                    <h1 className="text-2xl font-semibold text-transparent bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text">ezyPipeCal</h1>
                    <p className="mt-0.5 text-xs text-gray-500">Pipe Calculation Tool</p>
                </div>
                <div className="flex gap-2 mt-2 md:mt-0 md:ml-10">
                    <button 
                        className={`py-1.5 px-3 text-sm font-medium transition-all duration-300 border-b-2 ${activeMode === 'ip' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-500'}`}
                        onClick={() => handleSwitchMode('ip')}>
                        I-P Units
                    </button>
                    <button 
                        className={`py-1.5 px-3 text-sm font-medium transition-all duration-300 border-b-2 ${activeMode === 'si' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-500'}`}
                        onClick={() => handleSwitchMode('si')}>
                        SI Units
                    </button>
                     <button 
                        className={`py-1.5 px-3 text-sm font-medium transition-all duration-300 border-b-2 ${activeMode === 'npsha' ? 'border-blue-500 text-blue-600' : 'border-transparent text-gray-500 hover:text-blue-500'}`}
                        onClick={() => handleSwitchMode('npsha')}>
                        NPSHa
                    </button>
                </div>
            </header>

            <main className="flex-grow w-full p-1 md:p-3">
                <div className="max-w-[1800px] mx-auto">
                    
                    {activeMode === 'npsha' ? (
                        <NPSHaCalculator />
                    ) : (
                        <div className="flex flex-col gap-3">
                            <div className="flex flex-col p-3 bg-white border border-gray-200 shadow-lg md:p-4">
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-4 p-3 mb-3 border border-gray-200 rounded-md bg-slate-50">
                                    <div className="grid grid-cols-[auto,1fr] gap-x-2 items-center">
                                        <label htmlFor="system-selector" className=" text-gray-700 text-right whitespace-nowrap">Select System:</label>
                                        <select id="system-selector" value={systemType} onChange={(e) => setSystemType(e.target.value)} className={inputClasses}>
                                            <option value="plumbing-condenser">Plumbing/Condenser water</option>
                                            <option value="chilled-water">Chilled water</option>
                                        </select>
                                    </div>
                                     <>
            <div className="grid grid-cols-[auto,1fr,auto] gap-x-2 items-center">
                <label htmlFor="c-factor-input" className=" text-gray-700 text-right whitespace-nowrap">Roughness coefficient (<span className=" text-gray-700 italic">C </span>):</label>
                <input
                    type="number"
                    id="c-factor-input"
                    value={pipeRoughnessCValue}
                    onChange={(e) => setPipeRoughnessCValue(Number(e.target.value))}
                    step="1"
                    className={`${inputClasses} text-right`}
                />
                <div className="relative">
                    <button
                        type="button"
                        onClick={() => setIsModalOpen(true)} 
                        className="flex items-center justify-center w-5 h-5"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-500"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>
                    </button>
                </div>
            </div>

            {isModalOpen && (
                <div
                    className="fixed inset-0 bg-black/75 flex justify-center items-center z-50"
                    onClick={() => setIsModalOpen(false)} 
                >
                    <div
                        className="relative bg-white p-4 rounded-lg shadow-xl"
                        onClick={(e) => e.stopPropagation()} 
                    >
                        <button
                            onClick={() => setIsModalOpen(false)}
                            className="absolute -top-3 -right-3 w-8 h-8 bg-white rounded-full flex items-center justify-center text-black text-xl font-bold border"
                        >
                            &times;
                        </button>
                        <img src="/ezypipe/CFACTOR AD.png" alt="Hazen-Williams C-Factor Table" className="max-w-screen-md max-h-[80vh]" />
                    </div>
                </div>
            )}
        </>
                                    <div className="grid grid-cols-[auto,1fr] gap-x-2 items-center">
                                        <label htmlFor="static-head-input" className=" text-gray-700 text-right whitespace-nowrap">Static Head (Z₂-Z₁) ({activeMode === 'ip' ? 'ft' : 'm'}):</label>
                                        <input 
                                            type="number" 
                                            id="static-head-input" 
                                            value={staticHead} 
                                            onChange={(e) => {
                                                setStaticHead(e.target.value);
                                                if (e.target.value !== '' && !isNaN(Number(e.target.value))) {
                                                    setIsStaticHeadValid(true);
                                                }
                                            }} 
                                            step="any" 
                                            className={`${inputClasses} text-right ${!isStaticHeadValid ? 'border-red-500 ring-2 ring-red-500/25' : ''}`} 
                                        />
                                    </div>
                                </div>

                                <div className={`flex-col flex-grow ${activeMode === 'ip' ? 'flex' : 'hidden'}`}>
                                    <div className="flex-grow w-full overflow-x-auto">
                                        <table className="w-full border-collapse">
                                            <thead className="text-xs text-gray-600 bg-slate-100">
                                                <tr>
                                                    {['Drag', 'Del', 'No.', 'Description', 'Pipe Type', 'Flow (GPM)', 'Size (Inch)', 'Check Size', 'Qty/Length (ft)', 'ID (Inch)', 'C/K Value', 'Velocity (ft/s)', 'Friction Loss (ft/100ft)', 'Major Loss (ft.wg)', 'Minor Loss (ft.wg)', 'Head Loss (ft.wg)'].map(h => 
                                                        <th key={h} className="p-1 text-center font-normal border border-gray-200 sticky top-0 bg-slate-100 z-10">{h}</th>
                                                    )}
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {ipRows.map((row, index) => {
                                                const sizeOptions = pipeSizeData[row.pipeType as PipeTypeKey] || [];
                                                const currentIndex = sizeOptions.findIndex(opt => opt.nom_ip === String(row.pipeSize));
                                                const invalidResultClass = row.checkSize !== 'OK' && row.checkSize !== '-' && row.checkSize !== 'N/A' ? 'bg-red-100 text-red-700 font-bold' : '';

                                                return (
                                                    <tr 
                                                        key={row.id} 
                                                        draggable
                                                        onDragStart={() => (dragItem.current = index)}
                                                        onDragEnter={() => (dragOverItem.current = index)}
                                                        onDragEnd={handleSort}
                                                        onDragOver={(e) => e.preventDefault()}
                                                        className={`text-xs transition-colors duration-200 hover:bg-slate-50 ${dragItem.current === index ? 'opacity-50' : ''}`}
                                                    >
                                                        <td className="p-1 border border-gray-200 cursor-grab text-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="inline-block text-gray-400" viewBox="0 0 16 16">
                                                                <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                                            </svg>
                                                        </td>
                                                        <td className="p-1 border border-gray-200"><button className={removeBtnClasses} onClick={() => handleRemoveRow(row.id)}>X</button></td>
                                                        <td className="p-1 text-center border border-gray-200">{index + 1}</td>
                                                        <td className="p-1 border border-gray-200 min-w-[180px]">
                                                            <div className="flex items-center gap-2">
                                                                <div className="flex-grow">
                                                                    <select className={`${inputClasses}`} value={row.description} onChange={e => handleIpRowChange(row.id, 'description', e.target.value)}>
                                                                        {descriptionOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                                                                    </select>
                                                                    {row.description === 'Custom' && (
                                                                        <input type="text" placeholder="Custom Name" value={row.customDescription} onChange={(e) => handleIpRowChange(row.id, 'customDescription', e.target.value)} className={`${inputClasses} mt-1`} />
                                                                    )}
                                                                </div>
                                                                <img className="object-cover w-12 h-12 border rounded bg-slate-100 border-slate-200" src={kValueData[row.description as keyof typeof kValueData]?.img || 'https://placehold.co/48x48/e2e8f0/334155?text=?'} alt="preview" />
                                                            </div>
                                                        </td>
                                                        <td className="p-1 border border-gray-200 min-w-[130px]"><select className={inputClasses} value={row.pipeType} onChange={e => handleIpRowChange(row.id, 'pipeType', e.target.value)}>{pipeTypeOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}</select></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.flow} onChange={e => handleIpRowChange(row.id, 'flow', e.target.value)} step="any" /></td>
                                                        <td className="p-1 border border-gray-200 min-w-[100px]">
                                                            {row.pipeType === 'Custom' ? (
                                                                <input type="number" className={`${inputClasses} text-right`} value={row.pipeSize} onChange={e => handleIpRowChange(row.id, 'pipeSize', e.target.value)} step="any" />
                                                            ) : (
                                                                <div className="flex items-center justify-between gap-1">
                                                                    <button
                                                                        onClick={() => {
                                                                            if (currentIndex > 0) {
                                                                                const newSize = sizeOptions[currentIndex - 1].nom_ip;
                                                                                handleIpRowChange(row.id, 'pipeSize', newSize);
                                                                            }
                                                                        }}
                                                                        disabled={currentIndex <= 0}
                                                                        className="px-2 py-1 font-bold text-gray-600 bg-gray-200 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300"
                                                                    >
                                                                        -
                                                                    </button>
                                                                    <span className="flex-grow text-center text-gray-800">
                                                                        {sizeOptions[currentIndex]?.text_ip || row.pipeSize}
                                                                    </span>
                                                                    <button
                                                                        onClick={() => {
                                                                            if (currentIndex !== -1 && currentIndex < sizeOptions.length - 1) {
                                                                                const newSize = sizeOptions[currentIndex + 1].nom_ip;
                                                                                handleIpRowChange(row.id, 'pipeSize', newSize);
                                                                            }
                                                                        }}
                                                                        disabled={currentIndex === -1 || currentIndex >= sizeOptions.length - 1}
                                                                        className="px-2 py-1 font-bold text-gray-600 bg-gray-200 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300"
                                                                    >
                                                                        +
                                                                    </button>
                                                                </div>
                                                            )}
                                                        </td>
                                                        <td className={`${outputCellClasses} ${invalidResultClass}`}>{row.checkSize}</td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.quantity} onChange={e => handleIpRowChange(row.id, 'quantity', e.target.value)} step="any" /></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.pipeId} onChange={e => handleIpRowChange(row.id, 'pipeId', e.target.value)} step="any" disabled={row.pipeType !== 'Custom'} /></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.coeffValue} onChange={e => handleIpRowChange(row.id, 'coeffValue', e.target.value)} step="any" /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={`${row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} ${invalidResultClass}`} value={typeof row.velocity === 'number' ? row.velocity.toFixed(2) : row.velocity} onChange={e => handleIpRowChange(row.id, 'velocity', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={`${row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} ${invalidResultClass}`} value={typeof row.frictionLoss100 === 'number' ? row.frictionLoss100.toFixed(2) : row.frictionLoss100} onChange={e => handleIpRowChange(row.id, 'frictionLoss100', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} value={typeof row.majorLoss === 'number' ? row.majorLoss.toFixed(3) : row.majorLoss} onChange={e => handleIpRowChange(row.id, 'majorLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} value={typeof row.minorLoss === 'number' ? row.minorLoss.toFixed(3) : row.minorLoss} onChange={e => handleIpRowChange(row.id, 'minorLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full font-semibold`} value={typeof row.headLoss === 'number' ? row.headLoss.toFixed(3) : row.headLoss} onChange={e => handleIpRowChange(row.id, 'headLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                    </tr>
                                                )
                                                })}
                                            </tbody>
                                        </table>
                                        
                                    </div>
                                    <div className="flex flex-wrap gap-3 mt-3">
                                        <button className={actionBtnClasses} onClick={handleAddRow}>+ Add Item</button>
                                    </div>
                                </div>
                                

                                <div className={`flex-col flex-grow ${activeMode === 'si' ? 'flex' : 'hidden'}`}>
                                    
                                    <div className="flex-grow w-full overflow-x-auto">
                                        <table className="w-full border-collapse">
                                            <thead className="text-xs text-gray-600 bg-slate-100">
                                                <tr>
                                                    {['Drag', 'Del', 'No.', 'Description', 'Pipe Type', 'Flow (Lpm)', 'Flow (GPM)', 'Size (Inch)', 'Size (mm)', 'ID (inch)', 'Check Size', 'Qty/Length (m)', 'C/K Value', 'Velocity (m/s)', 'Friction Loss (m/100m)', 'Major Loss (m)', 'Minor Loss (m)', 'Head Loss (m)'].map(h => 
                                                        <th key={h} className="p-1 text-center font-normal border border-gray-200 sticky top-0 bg-slate-100 z-10">{h}</th>
                                                    )}
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {siRows.map((row, index) => {
                                                   const invalidResultClass = row.checkSize !== 'OK' && row.checkSize !== '-' && row.checkSize !== 'N/A' ? 'bg-red-100 text-red-700 font-bold' : '';
                                                   const sizeOptionsSI = pipeSizeData[row.pipeType as PipeTypeKey] || [];
                                                   const currentIndexSI = sizeOptionsSI.findIndex(opt => opt.text_ip === row.sizeInch);
                                                   const currentPipeDataSI = sizeOptionsSI[currentIndexSI];

                                                   return (
                                                    <tr 
                                                        key={row.id} 
                                                        draggable
                                                        onDragStart={() => (dragItem.current = index)}
                                                        onDragEnter={() => (dragOverItem.current = index)}
                                                        onDragEnd={handleSort}
                                                        onDragOver={(e) => e.preventDefault()}
                                                        className={`text-xs transition-colors duration-200 hover:bg-slate-50 ${dragItem.current === index ? 'opacity-50' : ''}`}
                                                    >
                                                        <td className="p-1 border border-gray-200 cursor-grab text-center">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="inline-block text-gray-400" viewBox="0 0 16 16">
                                                                <path d="M7 2a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zM7 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm-3 3a1 1 0 1 1-2 0 1 1 0 0 1 2 0zm3 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0z"/>
                                                            </svg>
                                                        </td>
                                                        <td className="p-1 border border-gray-200"><button className={removeBtnClasses} onClick={() => handleRemoveRow(row.id)}>X</button></td>
                                                        <td className="p-1 text-center border border-gray-200">{index + 1}</td>
                                                        <td className="p-1 border border-gray-200 min-w-[180px]">
                                                            <div className="flex items-center gap-2">
                                                                <div className="flex-grow">
                                                                    <select className={`${inputClasses}`} value={row.description} onChange={e => handleSiRowChange(row.id, 'description', e.target.value)}>
                                                                        {descriptionOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}
                                                                    </select>
                                                                    {row.description === 'Custom' && (
                                                                        <input type="text" placeholder="Custom Name" value={row.customDescription} onChange={(e) => handleSiRowChange(row.id, 'customDescription', e.target.value)} className={`${inputClasses} mt-1`} />
                                                                    )}
                                                                </div>
                                                                <img className="object-cover w-12 h-12 border rounded bg-slate-100 border-slate-200" src={kValueData[row.description as keyof typeof kValueData]?.img || 'https://placehold.co/48x48/e2e8f0/334155?text=?'} alt="preview" />
                                                            </div>
                                                        </td>
                                                        <td className="p-1 border border-gray-200 min-w-[130px]"><select className={inputClasses} value={row.pipeType} onChange={e => handleSiRowChange(row.id, 'pipeType', e.target.value)}>{pipeTypeOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}</select></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.flowLpm} onChange={e => handleSiRowChange(row.id, 'flowLpm', e.target.value)} step="any" /></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.flowGpm} onChange={e => handleSiRowChange(row.id, 'flowGpm', e.target.value)} step="any" /></td>
                                                        
                                                        <td className="p-1 border border-gray-200 min-w-[100px]">
                                                            {row.pipeType === 'Custom' ? (
                                                                <div className={`${outputCellClasses} flex items-center justify-center h-full`}>N/A</div>
                                                            ) : (
                                                                <div className="flex items-center justify-between gap-1">
                                                                    <button
                                                                        onClick={() => {
                                                                            if (currentIndexSI > 0) {
                                                                                const newPipeData = sizeOptionsSI[currentIndexSI - 1];
                                                                                handleSiRowChange(row.id, 'pipeSizeIp', newPipeData.nom_ip);
                                                                            }
                                                                        }}
                                                                        disabled={currentIndexSI <= 0}
                                                                        className="px-2 py-1 font-bold text-gray-600 bg-gray-200 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300"
                                                                    >
                                                                        -
                                                                    </button>
                                                                    <span className="flex-grow text-center text-gray-800">
                                                                        {row.sizeInch}
                                                                    </span>
                                                                    <button
                                                                        onClick={() => {
                                                                            if (currentIndexSI !== -1 && currentIndexSI < sizeOptionsSI.length - 1) {
                                                                                const newPipeData = sizeOptionsSI[currentIndexSI + 1];
                                                                                handleSiRowChange(row.id, 'pipeSizeIp', newPipeData.nom_ip);
                                                                            }
                                                                        }}
                                                                        disabled={currentIndexSI === -1 || currentIndexSI >= sizeOptionsSI.length - 1}
                                                                        className="px-2 py-1 font-bold text-gray-600 bg-gray-200 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-300"
                                                                    >
                                                                        +
                                                                    </button>
                                                                </div>
                                                            )}
                                                        </td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]">
                                                            {row.pipeType === 'Custom' ? (
                                                                <input type="number" className={`${inputClasses} text-right`} value={row.pipeSizeSi} onChange={e => handleSiRowChange(row.id, 'pipeSizeSi', e.target.value)} step="any" />
                                                            ) : (
                                                                <div className={`${outputCellClasses} flex items-center justify-center h-full`}>{currentPipeDataSI ? currentPipeDataSI.nom_si : '-'}</div>
                                                            )}
                                                        </td>
                                                        <td className="p-1 border border-gray-200">
                                                            <div className={`${outputCellClasses} flex items-center justify-center h-full`}>
                                                                {row.pipeType === 'Custom' ?
                                                                    (Number(row.pipeSizeSi) > 0 ? (Number(row.pipeSizeSi) / 25.4).toFixed(3) : '-') :
                                                                    (currentPipeDataSI ? currentPipeDataSI.id_in.toFixed(3) : '-')
                                                                }
                                                            </div>
                                                        </td>

                                                        <td className={`${outputCellClasses} ${invalidResultClass}`}>{row.checkSize}</td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.quantity} onChange={e => handleSiRowChange(row.id, 'quantity', e.target.value)} step="any" /></td>
                                                        <td className="p-1 border border-gray-200 min-w-[80px]"><input type="number" className={`${inputClasses} text-right`} value={row.coeffValue} onChange={e => handleSiRowChange(row.id, 'coeffValue', e.target.value)} step="any" /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={`${row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} ${invalidResultClass}`} value={typeof row.velocity === 'number' ? row.velocity.toFixed(2) : row.velocity} onChange={e => handleSiRowChange(row.id, 'velocity', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={`${row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} ${invalidResultClass}`} value={typeof row.frictionLoss100 === 'number' ? row.frictionLoss100.toFixed(2) : row.frictionLoss100} onChange={e => handleSiRowChange(row.id, 'frictionLoss100', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} value={typeof row.majorLoss === 'number' ? row.majorLoss.toFixed(3) : row.majorLoss} onChange={e => handleSiRowChange(row.id, 'majorLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full`} value={typeof row.minorLoss === 'number' ? row.minorLoss.toFixed(3) : row.minorLoss} onChange={e => handleSiRowChange(row.id, 'minorLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                        <td className="p-0 border border-gray-200 min-w-[120px]"><input type="number" step="any" className={row.description === 'Custom' ? editableOutputClasses : `${outputCellClasses} w-full font-semibold`} value={typeof row.headLoss === 'number' ? row.headLoss.toFixed(3) : row.headLoss} onChange={e => handleSiRowChange(row.id, 'headLoss', e.target.value)} readOnly={row.description !== 'Custom'} /></td>
                                                    </tr>
                                                   )
                                                })}
                                            </tbody>
                                        </table>
                                    </div>
                                    <div className="flex flex-wrap gap-3 mt-3">
                                        <button className={actionBtnClasses} onClick={handleAddRow}>+ Add Item</button>
                                    </div>
                                </div>
                            </div>
                                                    
                            <div className="flex items-start justify-center p-4 bg-white border border-gray-200 shadow-lg lg:p-6">
                                <div className="w-full text-center">
                                    <div className="text-lg font-medium text-purple-500">Total Dynamic Head (TDH)</div>
                                    <div className="my-1 text-5xl font-semibold leading-tight text-gray-800 break-all">{results.totalDynamicHead.toFixed(3)}</div>
                                    <div className="mb-2 text-base font-light text-blue-500 opacity-90">{activeMode === 'ip' ? 'ft.wg' : 'm'}</div>
                                    <div className="w-full pt-2 mt-2 border-t border-gray-200">
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Service Water:</span><span className="text-gray-800">{systemType === 'plumbing-condenser' ? 'Plumbing/Condenser water' : 'Chilled water'}</span></div>
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500 ">Roughness coefficient (<span className=" text-gray-500 italic">C </span>)</span> <span className=" text-gray-800 "><span className=" text-gray-800 italic">C = </span>{pipeRoughnessCValue}</span></div>
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Total Major Loss</span><span className="text-gray-800">{results.totalMajorLoss.toFixed(3)}</span></div>
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Total Minor Loss</span><span className="text-gray-800">{results.totalMinorLoss.toFixed(3)}</span></div>
                                        <hr className="my-1 border-gray-200/50" />
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Total Friction Loss</span><span className="text-gray-800">{results.totalFrictionLoss.toFixed(3)}</span></div>
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Static Head</span><span className="text-gray-800">{Number(results.staticHead).toFixed(2)}</span></div>
                                        <hr className="my-1 border-gray-200/70" />
                                        <div className="flex justify-between py-0.5 text-xs"><span className="text-gray-500">Status</span><span className="text-gray-800">{results.status}</span></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            </main>
        </div>
    );
};

export default EzyPipeCal;

